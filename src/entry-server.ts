import { basename } from "node:path";
import { renderToString, type SSRContext } from "vue/server-renderer";
import createApp from "./main";
import type { AppSsrManifest, RenderResult } from "./common";

export async function render(url: string, ssrManifest: AppSsrManifest): Promise<RenderResult> {
  const { app, router } = createApp();

  await router.push(url);
  await router.isReady();

  let statusCode = 200;
  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const context: SSRContext = {
    url,
  };

  if (!router.currentRoute || router.currentRoute.value.name === "page-not-found") {
    statusCode = 404;
  }

  const html = await renderToString(app, context);

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  let preloadLinks = "";

  if (ssrManifest) {
    preloadLinks = renderPreloadLinks(context.modules, ssrManifest);
  }

  let page = null;

  if (context.page) {
    page = {
      title: context.page.title,
      description: context.page.description,
      keywords: context.page.keywords,
    };
  }

  return {
    html,
    preloadLinks,
    page,
    statusCode,
    state: context.state,
  };
}

function renderPreloadLinks(modules: Array<string>, manifest: AppSsrManifest) {
  let links = "";
  const seen = new Set();

  console.log("modules", modules);
  console.log("manifest", manifest);

  modules.forEach((id) => {
    const files = manifest[id];
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file);
          const filename = basename(file);
          if (manifest[filename]) {
            for (const depFile of manifest[filename]) {
              links += renderPreloadLink(depFile);
              seen.add(depFile);
            }
          }
          links += renderPreloadLink(file);
        }
      });
    }
  });

  return links;
}

function renderPreloadLink(file: string) {
  if (file.endsWith(".js")) {
    return `<link rel="modulepreload" crossorigin href="${file}">`;
  } else if (file.endsWith(".css")) {
    return `<link rel="stylesheet" href="${file}">`;
  } else if (file.endsWith(".woff")) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`;
  } else if (file.endsWith(".woff2")) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`;
  } else if (file.endsWith(".gif")) {
    return ` <link rel="preload" href="${file}" as="image" type="image/gif">`;
  } else if (file.endsWith(".jpg") || file.endsWith(".jpeg")) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`;
  } else if (file.endsWith(".png")) {
    return ` <link rel="preload" href="${file}" as="image" type="image/png">`;
  }

  return "";
}
